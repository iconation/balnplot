<html>

<head>
  <script type="text/javascript" src="static/lightweight-charts.standalone.production.js"></script>
  <style>
    @font-face {
      font-family: "balnfont";
      src: url('static/baln.otf');
    }

    body {
      background: #01002a;
      color: white;
      font-family: "balnfont";
    }

    #graphes {
      width: 90%;
      margin: auto;
    }

    .graph {
      padding-bottom: 30px;
    }

    .graphgroup {
      background: #122a4b;
      padding: 35px;
      padding-top: 1px;
      margin-bottom: 30px;
      border-radius: 10px;
    }
  </style>
</head>

<body>
  <div id="graphes">
    <h2>Last Update: <span id="now"></span>
    <br/>
    <br/>
    <br/>

    <div class="graphgroup">
      <h2>Prices</h2>
      <h4>BALN / bnUSD Price</h4>
      <div class="graph" id="balnBnusdPrice"></div>
      <h4>sICX / bnUSD Price</h4>
      <div class="graph" id="sicxBnusdPrice"></div>
    </div>

    <div class="graphgroup">
      <h2>Pools</h2>
      <h4>BALN / bnUSD Pool (BALN)</h4>
      <div class="graph" id="balnBnusdPool"></div>
      <h4>sICX / bnUSD Pool (sICX)</h4>
      <div class="graph" id="sicxBnusdPool"></div>
      <h4>sICX / ICX Pool (sICX)</h4>
      <div class="graph" id="sicxIcxPool"></div>
    </div>

    <div class="graphgroup">
      <h2>APYs</h2>
      <h4>BALN / bnUSD APY %</h4>
      <div class="graph" id="balnBnusdApy"></div>
      <h4>sICX / bnUSD APY %</h4>
      <div class="graph" id="sicxBnusdApy"></div>
      <h4>sICX / ICX APY %</h4>
      <div class="graph" id="sicxIcxApy"></div>
      <h4>Loans APY %</h4>
      <div class="graph" id="loansApy"></div>
    </div>
    
    <div class="graphgroup">
      <h2>BALN</h2>
      <h4>Staked BALN amount</h4>
      <div class="graph" id="stakedBalnSupply"></div>
      <h4>BALN MarketCap (USD)</h4>
      <div class="graph" id="totalBalnSupply"></div>
    </div>
    
  </div>
</body>

<script>

  const CHART_THEME = {
    chart: {
      layout: {
        backgroundColor: '#0c2a4d',
        lineColor: '#2897a9',
        textColor: '#ffffff'
      },
      watermark: {
        color: 'rgba(0, 0, 0, 0)'
      },
      crosshair: {
        color: '#217f94'
      },
      grid: {
        vertLines: {
          visible: false
        },
        horzLines: {
          visible: false
        }
      }
    },
    series: {
      topColor: 'rgba(50, 184, 187, 0.56)',
      bottomColor: 'rgba(50, 184, 187, 0.04)',
      lineColor: 'rgba(50, 184, 187, 1)',
      lineWidth: 2
    }
  }

  const graphWidth = document.getElementById("graphes").offsetWidth - 75;
  const DEZOOM_FACTOR = 0; // Math.round(3500 / graphWidth)
  function dateToChartTime(date) {
    return Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), 0) / 1000;
  };

  fetch('/readall').then(response => {
    response.json().then(json => {

      const getTimestamp = (date) => {
        return dateToChartTime(new Date(date * 1000))
      }

      function dezoom(array, skip) {
        if (skip == 0) return array
        var result = new Array()
        array.forEach((item, index) => {
          if (index % skip === (skip - 1)) {
            result.push(item)
          }
        })
        return result
      }

      const transformData = (input) => {
        input = dezoom(input, DEZOOM_FACTOR)
        return input.map(arr => {
          return { time: getTimestamp(arr[0]), value: arr[1] }
        })
      }

      const transformDatatotalBalnSupply = (input, balnBnusdPrice) => {
        input = dezoom(input, DEZOOM_FACTOR)
        balnBnusdPrice = dezoom(balnBnusdPrice, DEZOOM_FACTOR)
        const balnPrice = balnBnusdPrice.map(e => e[1])
        return input.map((arr, index) => {
          return { time: getTimestamp(arr[0]), value: arr[1] * balnPrice[index] }
        })
      }

      const createChart = (name) => {
        const chart = LightweightCharts.createChart(document.getElementById(name), {
          width: graphWidth, height: 200,
          rightPriceScale: {
            borderVisible: false
          },
          timeScale: {
            borderVisible: false,
            timeVisible: true
          }
        })
        let data = null

        switch (name) {
          case 'totalBalnSupply':
            data = transformDatatotalBalnSupply(json[name], json['balnBnusdPrice'])
            break

          default:
            data = transformData(json[name])
            break
        }

        const series = chart.addAreaSeries()
        series.setData(data)
        chart.timeScale().fitContent()
        series.applyOptions(CHART_THEME.series)
        chart.applyOptions(CHART_THEME.chart)
      }

      createChart('balnBnusdPrice')
      createChart('balnBnusdPool')
      createChart('stakedBalnSupply')
      createChart('totalBalnSupply')
      createChart('sicxBnusdPrice')
      createChart('sicxIcxPool')
      createChart('sicxBnusdPool')
      createChart('balnBnusdApy')
      createChart('sicxBnusdApy')
      createChart('sicxIcxApy')
      createChart('loansApy')

    })
  })

</script>

</html>