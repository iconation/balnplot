<html>

<head>
  <script type="text/javascript" src="{{ url_for('static', filename='lightweight-charts.standalone.production.js') }}"></script>
  <style>
    @font-face {
      font-family: "balnfont";
      src: url('/static/baln.otf');
    }

    body {
      background: #01002a;
      color: white;
      font-family: "balnfont";
      padding: 5%;
    }

    #graphes {
      width: 85%;
      margin: auto;
    }

    .graph {
      padding-bottom: 30px;
    }
  </style>
</head>

<body>
  <div id="graphes">
    <h2>BALN / bnUSD</h2>
    <div class="graph" id="balnBnusdPrice"></div>
    <h2>BALN / bnUSD Pool</h2>
    <div class="graph" id="balnBnusdPool"></div>
    <h2>Staked BALN amount</h2>
    <div class="graph" id="stakedBalnSupply"></div>
    <h2>BALN MarketCap (USD)</h2>
    <div class="graph" id="totalBalnSupply"></div>
    <h2>sICX / bnUSD</h2>
    <div class="graph" id="sicxBnusdPrice"></div>
    <h2>sICX / bnUSD Pool</h2>
    <div class="graph" id="sicxBnusdPool"></div>
    <h2>sICX / ICX Pool</h2>
    <div class="graph" id="sicxIcxPool"></div>
  </div>
</body>

<script>

  const CHART_THEME = {
    chart: {
      layout: {
        backgroundColor: '#0c2a4d',
        lineColor: '#2897a9',
        textColor: '#ffffff'
      },
      watermark: {
        color: 'rgba(0, 0, 0, 0)'
      },
      crosshair: {
        color: '#217f94'
      },
      grid: {
        vertLines: {
          visible: false
        },
        horzLines: {
          visible: false
        }
      }
    },
    series: {
      topColor: 'rgba(50, 184, 187, 0.56)',
      bottomColor: 'rgba(50, 184, 187, 0.04)',
      lineColor: 'rgba(50, 184, 187, 1)',
      lineWidth: 2
    }
  }

  fetch('/readall').then(response => {
    response.json().then(json => {

      const getTimestamp = (date) => {
        const FRANCE_TIME_OFFSET = 10800
        return Math.round(new Date(date).getTime() / 1000) + FRANCE_TIME_OFFSET
      }

      function dezoom(array, skip) {
        var result = new Array()
        array.forEach((item, index) => {
          if (index % skip === (skip - 1)) {
            result.push(item)
          }
        })
        return result
      }

      const transformData = (input) => {
        input = dezoom(input, 5)
        return input.map(arr => {
          return { time: getTimestamp(arr[0]), value: arr[1] }
        })
      }

      const transformDatatotalBalnSupply = (input) => {
        input = dezoom(input, 5)
        const balnPrice = dezoom(json['balnBnusdPrice'], 5).map(e => e[1])
        return input.map((arr, index) => {
          return { time: getTimestamp(arr[0]), value: arr[1] * balnPrice[index] }
        })
      }

      const createChart = (name) => {
        const chart = LightweightCharts.createChart(document.getElementById(name), {
          width: document.getElementById("graphes").offsetWidth, height: 200,
          rightPriceScale: {
            borderVisible: false
          },
          timeScale: {
            borderVisible: false,
            timeVisible: true
          }
        })
        let data = null

        switch (name) {
          case 'totalBalnSupply':
            data = transformDatatotalBalnSupply(json[name])
            break

          default:
            data = transformData(json[name])
            break
        }

        // console.log(data)
        const series = chart.addAreaSeries()
        series.setData(data)
        chart.timeScale().fitContent()
        series.applyOptions(CHART_THEME.series)
        chart.applyOptions(CHART_THEME.chart)
      }

      createChart('balnBnusdPrice')
      createChart('balnBnusdPool')
      createChart('stakedBalnSupply')
      createChart('totalBalnSupply')
      createChart('sicxBnusdPrice')
      createChart('sicxIcxPool')
      createChart('sicxBnusdPool')

    })
  })

</script>

</html>